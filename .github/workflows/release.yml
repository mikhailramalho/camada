on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build-linux:
    name: Build Linux Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: sudo apt-get update && sudo apt-get install catch2 cmake linux-libc-dev ninja-build gperf doxygen && pip3 install toml && pip3 install -r requirements.txt

      # Setup/cache dependencies
    - name: Cache deps
      id: cache-deps-v1
      uses: actions/cache@v2
      with:
        path: deps
        key: ${{ runner.os }}-deps-v1

    - name: Download and build Release
      if: steps.cache-deps-v1.outputs.cache-hit != 'true'
      run: python3 ./scripts/get-deps.py -z -b

    - name: Generate release
      run: python3 ./scripts/release.py

    - name: Create tarball
      run: tar -czvf camada-${{ runner.os }}-${{ runner.arch }}.tar.gz release/

      # Upload asset
    - uses: actions/upload-artifact@v1
      with:
        name: release-linux
        path: ./camada-${{ runner.os }}-${{ runner.arch }}.tar.gz

  build-macos:
    name: Build MacOS Release
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: '9.0.4'
    - name: Install Dependencies
      run: brew install gmp cmake ninja python@3.11 automake boost zlib bison flex doxygen libtool pkgconfig gettext texinfo && pip3 install toml && pip3 install -r requirements.txt && brew uninstall --ignore-dependencies python@3.12

      # Setup/cache dependencies
    - name: Cache deps
      id: cache-deps-v1
      uses: actions/cache@v2
      with:
        path: deps
        key: ${{ runner.os }}-deps-v1

    - name: Download and build Release
      if: steps.cache-deps-v1.outputs.cache-hit != 'true'
      run: python3 ./scripts/get-deps.py -z -b

    - name: Generate release
      run: python3 ./scripts/release.py

    - name: Create tarball
      run: tar -czvf camada-${{ runner.os }}-${{ runner.arch }}.tar.gz release/

      # Upload asset
    - uses: actions/upload-artifact@v1
      with:
        name: release-macos
        path: camada-${{ runner.os }}-${{ runner.arch }}.tar.gz

  create-release:
    name: Upload Release Asset
    runs-on: ubuntu-20.04
    needs: [build-linux, build-macos]
    steps:
    - name: Download Linux Build
      uses: actions/download-artifact@v1
      with:
        name: release-linux
        path: ./

    - name: Download Macos Build
      uses: actions/download-artifact@v1
      with:
        name: release-macos
        path: ./

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset (Linux)
      id: upload-release-asset-linux
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./camada-${{ runner.os }}-${{ runner.arch }}.tar.gz
        asset_name: camada-${{ runner.os }}-${{ runner.arch }}.tar.gz
        asset_content_type: text/x-shellscript

    - name: Upload Release Asset (MacOS)
      id: upload-release-asset-macos
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./camada-${{ runner.os }}-${{ runner.arch }}.tar.gz
        asset_name: camada-${{ runner.os }}-${{ runner.arch }}.tar.gz
        asset_content_type: text/x-shellscript
